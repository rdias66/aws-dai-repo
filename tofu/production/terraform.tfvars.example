# O ARQUIVO ESTÁ CONFIGURADO COM VARIÁVEIS DE EXEMPLO, ALTERE O QUE FOR NECESSÁRIO PARA O SEU PROJETO

# Configuração Geral
region = "sa-east-1" # Adicione sua região, para o Brasil essa geralmente é a escolha
environment = "production" # Adicione seu ambiente (ex.: development, production)

# Configuração da VPC
vpc_id = "vpc-id" # Adicione o ID da VPC que você criou diretamente no console (recomendado devido à complexidade)

# Configuração do EC2
most_recent_ami = true # Defina como true para usar a AMI mais recente
ami_name_pattern = "ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" # Padrão para o nome da AMI, geralmente este é o valor para o free tier
virtualization_type = "hvm" # Exemplo: hvm ou paravirtual
ami_owners = ["099720109477"] # Lista de proprietários da AMI; para esta configuração, o proprietário geralmente é a Canonical, este é o valor deles
ec2_ami_id = "ami-080111c1449900431" # Adicione o ID da AMI, esta é a última AMI que usei; se preferir, verifique outras opções no console da AWS
ec2_instance_type = "t2.micro" # Adicione o tipo da instância EC2; t2.micro é uma boa escolha para o free tier
ec2_key_name = "your-app-ec2-key" # Adicione o nome do par de chaves EC2; esta chave será sua credencial .pem para conexão SSH na instância
ec2_associate_public_ip_address = true # Defina como true ou false conforme a necessidade de IP público
ec2_root_volume_size = 30 # Especifique o tamanho do volume raiz (em GB); 30 é o limite atual do free tier
ec2_root_volume_type = "gp2" # Adicione o tipo do volume raiz (ex.: gp2, gp3)
ec2_tag_platform = "Your-app-ec2-vm" # Adicione uma tag para a plataforma EC2

# Configuração do RDS
db_allocated_storage = 15 # Adicione o armazenamento alocado (em GB); 15 é o máximo para o free tier
db_max_allocated_storage = 20 # Adicione o armazenamento máximo alocado (em GB); 20 é o máximo para o free tier
db_engine = "postgres" # Seu serviço de banco de dados de escolha; aqui foi escolhido o PostgreSQL. O RDS suporta apenas bancos relacionais. Para algo como MongoDB, recomendo rodar em um container separado na instância EC2 ou em outra instância EC2.
db_engine_version = "16.3" # Relacionado ao banco de dados escolhido; depende das suas necessidades
db_parameter_group_name = "default.postgres16" # Adicione o nome do grupo de parâmetros, se houver
db_instance_class = "db.t3.micro" # Adicione a classe da instância; esta é uma boa escolha para o free tier
db_user = "postgres" # Adicione o nome de usuário do banco de dados
db_password = "password" # Adicione a senha do banco de dados
db_database = "my-app-db" # Adicione o nome do banco de dados
db_port = 5432 # Adicione a porta do banco de dados (padrão 5432 para PostgreSQL)
db_backup_retention_period = 0 # Número de dias para reter backups; pode afetar os custos
db_monitoring_interval = 60 # Adicione o intervalo de monitoramento (em segundos); pode afetar os custos
db_multi_az = false # Defina como true se a implantação Multi-AZ for necessária
db_publicly_accessible = true # Defina como true ou false conforme a necessidade de acessibilidade pública
db_storage_type = "gp2" # Exemplo: gp2, io1
db_tag_platform = "My-app-db" # Adicione uma tag para a plataforma RDS

# Configuração do ECR
backend_ecr_repo_name = "backend-image" # Adicione o nome do repositório ECR para o backend
frontend_ecr_repo_name = "frontend-image" # Adicione o nome do repositório ECR para o frontend
ecr_platform = "Full-Stack" # Adicione uma tag de plataforma para os repositórios ECR
ecr_scan_on_push = true # Defina como true se a verificação de imagem for necessária no push
ecr_image_tag_mutability = "MUTABLE" # Defina como MUTABLE ou IMMUTABLE; como configuraremos um CI para atualizar imagens a partir de commits na branch main, precisa ser mutable

# Configuração do S3
s3_bucket_name = "my-app-bucket" # Adicione o nome do bucket S3

# Zona de Disponibilidade
availability_zone = "sa-east-1a" # Adicione a zona de disponibilidade para os recursos (a até c no sa-east-1)
